# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/book/service_container.html
parameters:
#    parameter_name: value

services:
    # Security
    app.security.prediction_voter:
        class: AppBundle\Security\PredictionVoter
        public: false
        arguments: ['@security.access.decision_manager']
        tags:
            - { name: security.voter }

    # Menus
    app.menu_builder:
        class: AppBundle\Menu\MenuBuilder
        arguments: ['@knp_menu.factory', '@request_stack', '%current_season%']
    app.menu_breadcrumb:
        class: Knp\Menu\MenuItem
        factory: ['@app.menu_builder', createBreadcrumb]
        tags:
            - { name: knp_menu.menu, alias: breadcrumb }
    app.menu_main:
         class: Knp\Menu\MenuItem
         factory: ['@app.menu_builder', createMainMenu]
         tags:
             - { name: knp_menu.menu, alias: main }
    app.menu_footer:
         class: Knp\Menu\MenuItem
         factory: ['@app.menu_builder', createFooterMenu]
         arguments: [ '%mail_admin%' ]
         tags:
             - { name: knp_menu.menu, alias: footer }
    app.menu_user:
         class: Knp\Menu\MenuItem
         factory: ['@app.menu_builder', createUserMenu]
         arguments: ['@security.authorization_checker', '@security.token_storage']
         tags:
             - { name: knp_menu.menu, alias: user }
    app.menu_locale_switcher:
         class: Knp\Menu\MenuItem
         factory: ['@app.menu_builder', createLocaleSwitcherMenu]
         arguments: ['%locales%']
         tags:
             - { name: knp_menu.menu, alias: locale_switcher }

    # Utils
    app.utils.country:
        class: AppBundle\Utils\Country
        factory: [AppBundle\Utils\Country, loadFromYaml]
        arguments: ['%kernel.root_dir%/Resources/data/countries.yml']
    app.utils.nationality:
        class: AppBundle\Utils\Nationality
        factory: [AppBundle\Utils\Nationality, loadFromYaml]
        arguments: ['%kernel.root_dir%/Resources/data/nationalities.yml']

    # Twig
    app.twig.text_extension:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }
    app.twig.asset_if_extension:
        class: AppBundle\Twig\ConditionalAssetExtension
        arguments: ['%kernel.root_dir%', '@templating.helper.assets']
        tags:
            - { name: twig.extension }

    # Repositories
    app.repository.user:
        class: AppBundle\Repository\UserRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:User]
    app.repository.circuit:
        class: AppBundle\Repository\CircuitRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Circuit]
    app.repository.constructor:
        class: AppBundle\Repository\ConstructorRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Constructor]
    app.repository.driver:
        class: AppBundle\Repository\DriverRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Driver]
    app.repository.scoring_system:
        class: AppBundle\Repository\ScoringSystemRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:ScoringSystem]
    app.repository.season:
        class: AppBundle\Repository\SeasonRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Season]
    app.repository.race:
        class: AppBundle\Repository\RaceRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Race]
    app.repository.finishing_status:
        class: AppBundle\Repository\FinishingStatusRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:FinishingStatus]
    app.repository.result:
        class: AppBundle\Repository\ResultRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Result]
    app.repository.qualifying:
        class: AppBundle\Repository\QualifyingRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Qualifying]
    app.repository.team:
        class: AppBundle\Repository\TeamRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Team]
    app.repository.driver_standings:
        class: AppBundle\Repository\DriverStandingsRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:DriverStandings]
    app.repository.constructor_standings:
        class: AppBundle\Repository\ConstructorStandingsRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:ConstructorStandings]
    app.repository.user_standings:
        class: AppBundle\Repository\UserStandingsRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:UserStandings]
    app.repository.prediction:
        class: AppBundle\Repository\PredictionRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:Prediction]
    app.repository.finishing_position:
        class: AppBundle\Repository\FinishingPositionRepository
        factory: ['@doctrine.orm.entity_manager', getRepository]
        arguments: [AppBundle:FinishingPosition]

    # Services
    app.service.user:
        class: AppBundle\Service\UserService
        arguments: ['@app.repository.user', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.circuit:
        class: AppBundle\Service\CircuitService
        arguments: ['@app.repository.circuit', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.season:
        class: AppBundle\Service\SeasonService
        arguments: ['@app.repository.season', '@app.repository.scoring_system', '@app.repository.user', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.constructor:
        class: AppBundle\Service\ConstructorService
        arguments: ['@app.repository.constructor', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.driver:
        class: AppBundle\Service\DriverService
        arguments: ['@app.repository.driver', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.race:
        class: AppBundle\Service\RaceService
        arguments: ['@app.repository.race', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.finishing_status:
        class: AppBundle\Service\FinishingStatusService
        arguments: ['@app.repository.finishing_status', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.result:
        class: AppBundle\Service\ResultService
        arguments: ['@app.repository.result', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.qualifying:
        class: AppBundle\Service\QualifyingService
        arguments: ['@app.repository.qualifying', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.team:
        class: AppBundle\Service\TeamService
        arguments: ['@app.repository.team', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.driver_standings:
        class: AppBundle\Service\DriverStandingsService
        arguments: ['@app.repository.driver_standings', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.constructor_standings:
        class: AppBundle\Service\ConstructorStandingsService
        arguments: ['@app.repository.constructor_standings', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.user_standings:
        class: AppBundle\Service\UserStandingsService
        arguments: ['@app.repository.user_standings', '@logger']
        tags:
            - { name: monolog.logger, channel: app }
    app.service.prediction:
        class: AppBundle\Service\PredictionService
        arguments: ['@doctrine.orm.entity_manager', '@app.repository.prediction', '@app.repository.finishing_position', '@app.repository.season', '@app.repository.user', '@app.repository.user_standings', '@logger']
        tags:
            - { name: monolog.logger, channel: app }

    # Listeners
    app.listener.console_exception:
        class: AppBundle\Listener\ConsoleExceptionListener
        arguments: ['@logger']
        tags:
            - { name: kernel.event_listener, event: console.exception }
    app.listener.table_prefix:
        class: AppBundle\Listener\TablePrefixListener
        arguments: ['%database_prefix%']
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata }
    app.listener.sequence_prefix:
        class: AppBundle\Listener\SequencePrefixListener
        arguments: ['%database_prefix%']
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata }

    # Monolog Processors
    app.monolog.processor.web:
        class: Monolog\Processor\WebProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.uid:
        class: Monolog\Processor\UidProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.user:
        class: AppBundle\Monolog\Processor\UserProcessor
        public: false
        arguments: ['@security.token_storage']
        tags:
            - { name: monolog.processor }
    app.monolog.processor.race:
        class: AppBundle\Monolog\Processor\RaceProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.circuit:
        class: AppBundle\Monolog\Processor\CircuitProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.driver:
        class: AppBundle\Monolog\Processor\DriverProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.constructor:
        class: AppBundle\Monolog\Processor\ConstructorProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.scoring_system:
        class: AppBundle\Monolog\Processor\ScoringSystemProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.season:
        class: AppBundle\Monolog\Processor\SeasonProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.team:
        class: AppBundle\Monolog\Processor\TeamProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.qualifying:
        class: AppBundle\Monolog\Processor\QualifyingProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.result:
        class: AppBundle\Monolog\Processor\ResultProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.finishing_status:
        class: AppBundle\Monolog\Processor\FinishingStatusProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.prediction:
        class: AppBundle\Monolog\Processor\PredictionProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.driver_standings:
        class: AppBundle\Monolog\Processor\DriverStandingsProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.constructor_standings:
        class: AppBundle\Monolog\Processor\ConstructorStandingsProcessor
        public: false
        tags:
            - { name: monolog.processor }
    app.monolog.processor.user_standings:
        class: AppBundle\Monolog\Processor\UserStandingsProcessor
        public: false
        tags:
            - { name: monolog.processor }

    # Ergast
    app.ergast.client:
        class: BrieucThomas\ErgastClient\ErgastClient
        factory: [BrieucThomas\ErgastClient\ErgastClientFactory, createErgastClient]
    app.ergast.importer:
        class: AppBundle\Ergast\Importer
        arguments: ['@doctrine.orm.default_entity_manager', '@app.service.season']
        calls:
            - [ addLoader, ['@app.ergast.loader.race'] ]
            - [ addLoader, ['@app.ergast.loader.qualifying'] ]
            - [ addLoader, ['@app.ergast.loader.finishing_status'] ]
            - [ addLoader, ['@app.ergast.loader.result'] ]
            - [ addLoader, ['@app.ergast.loader.driver_standings'] ]
            - [ addLoader, ['@app.ergast.loader.constructor_standings'] ]
    app.ergast.loader:
        abstract: true
        calls:
            - [ setClient, ['@app.ergast.client'] ]
            - [ setCountry, ['@app.utils.country'] ]
            - [ setNationality, ['@app.utils.nationality'] ]
            - [ setSeasonService, ['@app.service.season'] ]
            - [ setDriverService, ['@app.service.driver'] ]
            - [ setConstructorService, ['@app.service.constructor'] ]
            - [ setTeamService, ['@app.service.team'] ]
    app.ergast.loader.race:
        class: AppBundle\Ergast\Loader\RaceLoader
        parent: app.ergast.loader
        arguments: ['@app.service.circuit']
    app.ergast.loader.qualifying:
        class: AppBundle\Ergast\Loader\QualifyingLoader
        parent: app.ergast.loader
        arguments: ['@app.service.qualifying']
    app.ergast.loader.finishing_status:
        class: AppBundle\Ergast\Loader\FinishingStatusLoader
        parent: app.ergast.loader
        arguments: ['@app.service.finishing_status']
    app.ergast.loader.result:
        class: AppBundle\Ergast\Loader\ResultLoader
        parent: app.ergast.loader
        arguments: ['@app.service.result', '@app.service.finishing_status']
    app.ergast.loader.driver_standings:
        class: AppBundle\Ergast\Loader\DriverStandingsLoader
        parent: app.ergast.loader
        arguments: ['@app.service.driver_standings']
    app.ergast.loader.constructor_standings:
        class: AppBundle\Ergast\Loader\ConstructorStandingsLoader
        parent: app.ergast.loader
        arguments: ['@app.service.constructor_standings']
